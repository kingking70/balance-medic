/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/firstAnimatedModel.glb -o src/components/AnimatedModel.jsx -r public 
*/

import React, { useEffect } from 'react'
import { useGraph } from '@react-three/fiber'
import { useGLTF, useAnimations } from '@react-three/drei'
import { SkeletonUtils } from 'three-stdlib'
import { useControls } from 'leva'
import * as THREE from 'three'

export function AnimatedModel(props) {
  const group = React.useRef()
  const { scene, animations } = useGLTF('/models/firstAnimatedModel.glb')
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone)
  const { actions } = useAnimations(animations, group)
  const [currentAnimation, setCurrentAnimation] = React.useState("")

  const animation = useControls({
    animation: { 
      value: Object.keys(actions)[0] || "", 
      options: Object.keys(actions).length > 0 ? Object.keys(actions) : [""]
    },
  }, [actions]);

  console.log('Animation object:', animation)
  console.log('Available actions:', Object.keys(actions))
  console.log('Actions object:', actions)

  // Play initial animation when actions are loaded
  useEffect(() => {
    if (Object.keys(actions).length > 0 && !currentAnimation) {
      // Find first animation that's not "Armature.001|mixamo.com|Layer0"
      const availableAnimations = Object.keys(actions).filter(name => 
        name !== "Armature.001|mixamo.com|Layer0"
      )
      
      if (availableAnimations.length > 0) {
        const firstAnimation = availableAnimations[0]
        console.log('Auto-playing first animation:', firstAnimation)
        setCurrentAnimation(firstAnimation)
        const action = actions[firstAnimation]
        // action.setLoop(THREE.LoopRepeat, Infinity)
        action.reset().fadeIn(0.5).play()
      }
    }
  }, [actions, currentAnimation]);

  // Handle animation changes from Leva controls
  useEffect(() => {
    if (animation.animation && animation.animation !== currentAnimation && actions[animation.animation]) {
      console.log('Switching to animation:', animation.animation)
      setCurrentAnimation(animation.animation)
      
      // Stop all animations first
      Object.values(actions).forEach(action => {
        action.stop();
      });
      
      // Play the selected animation with looping
      const action = actions[animation.animation]
      action.setLoop(THREE.LoopRepeat, Infinity)
      action.reset().fadeIn(0.5).play()
    }
  }, [animation, actions]);

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Armature" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <primitive object={nodes.mixamorigHips} />
          <skinnedMesh name="Beta_Joints" geometry={nodes.Beta_Joints.geometry} material={materials.Beta_Joints_MAT1} skeleton={nodes.Beta_Joints.skeleton} />
          <skinnedMesh name="Beta_Surface" geometry={nodes.Beta_Surface.geometry} material={materials.Beta_HighLimbsGeoSG3} skeleton={nodes.Beta_Surface.skeleton} />
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/models/firstAnimatedModel.glb')
